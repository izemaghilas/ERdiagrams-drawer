{"version":3,"sources":["drawer/view/ShapesTypes.ts","drawer/view/AddColumn.ts","drawer/view/Column.ts","drawer/view/InputElement.ts","drawer/view/RemoveColumn.ts","drawer/view/Table.ts","drawer/view/Label.ts","drawer/view/Relation.ts","drawer/view/PrimaryKey.ts","drawer/view/DrawerShapesFactory.ts","drawer/controller/strategyPattern/resizeAddColumn.ts","drawer/controller/strategyPattern/setPrimaryKeyPosition.ts","drawer/controller/strategyPattern/resizeColumn.ts","drawer/controller/strategyPattern/resizeLabel.ts","drawer/controller/strategyPattern/resizeTable.ts","drawer/controller/strategyPattern/ElementsResizeHandler.ts","drawer/controller/strategyPattern/resizeColumnAsParent.ts","drawer/controller/strategyPattern/LabelValueChangeEventHandler.ts","drawer/controller/strategyPattern/resizeTableOnColumnRemoved.ts","drawer/controller/handleGraphEvents.ts","drawer/controller/renderTableTools.ts","drawer/controller/renderTable.ts","drawer/controller/strategyPattern/removeColumnFromTable.ts","drawer/controller/strategyPattern/renderColumn.ts","drawer/controller/strategyPattern/renderInputElement.ts","drawer/controller/strategyPattern/setPrimaryKey.ts","drawer/controller/strategyPattern/PointerClickEventHandlerStrategy.ts","drawer/controller/handlePaperEvents.ts","drawer/controller/renderPaper.ts","drawer/components/tools/ExportDiagramTool.tsx","drawer/components/tools/DeleteDiagramTool.tsx","drawer/components/tools/GitHubRepoTool.tsx","drawer/components/ToolsBar.tsx","drawer/components/userGuide/LanguageComponent.tsx","drawer/components/userGuide/guides.ts","drawer/components/userGuide/UsageCardHeader.tsx","drawer/components/userGuide/UsageCardBody.tsx","drawer/components/userGuide/UsageCard.tsx","drawer/components/images/logoER.png","drawer/index.tsx","drawer/components/Drawer.tsx","App.tsx","index.tsx"],"names":["TypesEnumeration","AddColumn","dia","Element","define","ADD_COLUMN_TYPE","attrs","body","refWidth","refHeight","strokeWidth","stroke","fill","container","ref","refX","refY","width","height","opacity","horizentalLine","cursor","title","verticalLine","markup","tagName","selector","Column","COLUMN_TYPE","primaryKey","InputElement","INPUT_ELEMENT_TYPE","name","children","namespaceURI","attributes","type","style","backgroundColor","border","outline","fontSize","fontWeight","RemoveColumn","REMOVE_COLUMN_TYPE","minus","Table","TABLE_TYPE","widthState","Label","LABEL_TYPE","label","textVerticalAnchor","textAnchor","Relation","Link","RELATION_TYPE","line","connection","strokeLinejoin","targetMarker","wrapper","defaultLabel","yAlignment","rx","ry","remove","button","icon","position","distance","visibility","relationTypes","fillColor","PrimaryKey","PRIMARY_KEY","pk","wheel","eye","horizentalLine1","horizentalLine2","DrawerShapesFactory","TABLE","getShape","LABEL","COLUMN","ADD_COLUMN","REMOVE_COLUMN","INPUT_ELEMENT","RELATION","relation","appendLabel","text","get","resizeAddColumn","addColumn","addColumnSize","size","resize","setPrimaryKeyPosition","column","pkElement","getEmbeddedCells","find","cell","columnPosition","pkElementPosition","set","x","y","resizeColumn","columnSize","resizeLabel","labelSize","resizeTable","table","tableWidth","push","forEach","getElementsResizeHandler","resizeElement","fitEmbeds","ElementsResizeHandlers","elementType","handler","resizeColumnAsParent","labelWidth","prop","handlers","parentType","handleEvent","getLabelChangeEventHandler","resizeTableOnColumnRemoved","getTextWidth","paper","findView","findBySelector","getBoundingClientRect","handleGraphEvents","graph","on","inputElement","value","parent","getParentCell","attr","addTo","embed","length","pop","renderTableTools","tableView","removeButtonTool","elementTools","Remove","drawRelationTool","Button","focusOpacity","offset","action","event","elementView","stopPropagation","hideTools","model","source","target","relationView","relationRemoveButton","findLabelNode","relationLabel","addEventListener","trigger","tableToolsView","ToolsView","tools","addTools","renderTable","tableName","addCells","removeColumnFromTable","removeColumnCellView","embdedCells","columnY","addColumnCell","filter","columnCell","columnCellY","redefineEmbedsPosition","removeColumnSize","renderColumn","addColumnCellView","addColumnCellPosition","addColumnCellSize","removeColumn","columnName","renderInputElement","labelCellView","labelPosition","htmlInputElement","$el","val","inputValue","handleBlurEvent","setPrimaryKey","primaryKeyCellView","PointerClickEventHandlers","getPointerClickonElementHandler","handlePaperEvents","evt","cellView","pointerClickHandler","error","console","log","ancestors","getAncestors","showTools","clientX","clientY","localPoint","clientToLocalPoint","off","tables","findModelsFromPoint","element","currentRelationType","slice","textContent","renderPaper","domElement","Graph","Paper","el","gridSize","drawGrid","args","color","thickness","interactive","stopDelegation","labelMove","linkMove","ExportDiagramTool","state","export","bind","paperNode","document","getElementById","svgNodeClone","querySelector","cloneNode","paperArea","this","props","getArea","setAttribute","svgNodeCloneString","XMLSerializer","serializeToString","blob","Blob","url","URL","createObjectURL","canvas","createElement","canvasContext","getContext","image","Image","onload","drawImage","util","downloadDataUri","toDataURL","revokeObjectURL","src","className","onClick","React","Component","DeleteDiagramTool","delete","clear","GitHubRepoTool","goToGitHubRepo","window","open","Separator","ToolsBar","LanguageComponent","languageName","setLanguage","languages","englishGuide","language","actions","instructions","frenchGuide","UsageCardHeader","closeUsageCard","setUserGuideLanguage","ActionLabel","setInstructions","setEmptyInstructions","ActionInstruction","instruction","UsageCardBody","userGuide","emptyInstructions","useState","showInstructions","map","UsageCard","setState","closeUserGuide","Drawer","showAssistantIcon","showUserGuide","rendredPaper","logo","alt","openUserGuide","id","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.9955c4fd.chunk.js","sourcesContent":["\nenum TypesEnumeration {\n    TABLE_TYPE = \"drawer.Table\",\n    LABEL_TYPE = \"drawer.Label\",\n    COLUMN_TYPE = \"drawer.Column\" ,\n    ADD_COLUMN_TYPE = \"drawer.AddColumn\",\n    REMOVE_COLUMN_TYPE = \"drawer.RemoveColumn\",\n    INPUT_ELEMENT_TYPE = \"drawer.InputElement\",\n    RELATION_TYPE = \"drawer.Relation\",\n    PRIMARY_KEY = \"drawer.PrimaryKey\",\n}\n\nexport default TypesEnumeration\n","import { dia } from \"jointjs\";\n\nimport TypesEnumeration from \"./ShapesTypes\"\n\nconst AddColumn = dia.Element.define(\n    TypesEnumeration.ADD_COLUMN_TYPE,\n    {\n        attrs: {\n            body: {\n                refWidth: '100%',\n                refHeight: '100%',\n                strokeWidth: 1,\n                stroke: '#FFFFFF',\n                fill: '#ffdec2',\n            },\n            container: {\n                ref: 'body',\n                refX: 5,\n                refY: '25%',\n                width: 15,\n                height: 15,\n                fill: '#FFFFFF',\n                opacity: 0\n            },\n            horizentalLine: {\n                ref: 'container',\n                refX:0,\n                refY: '33%',\n                width: 15,\n                height: 5,\n                fill: '#967559',\n                cursor: 'pointer',\n                title: \"new column\"\n            },\n            verticalLine: {\n                ref: 'container',\n                refX: '33%',\n                refY: 0,\n                width: 5,\n                height: 15,\n                fill: '#967559',\n                cursor: 'pointer',\n                title: \"new column\"\n            }\n        }\n    },\n    {\n        markup: [\n            {\n                tagName: 'rect',\n                selector: 'body'\n            },\n            {\n                tagName: 'rect',\n                selector: 'container'\n            },\n            {\n                tagName: 'rect',\n                selector: 'horizentalLine'\n            },\n            {\n                tagName: 'rect',\n                selector: 'verticalLine'\n            },\n        ]\n    }\n)\n\nexport default AddColumn","import { dia } from 'jointjs'\n\nimport TypesEnumeration from \"./ShapesTypes\"\n\nconst Column = dia.Element.define(\n    TypesEnumeration.COLUMN_TYPE,\n    {\n        attrs: {\n            body: {\n                refWidth: '100%',\n                refHeight: '100%',\n                strokeWidth: 1,\n                fill: 'transparent',\n            }\n        },\n        primaryKey : false\n    },\n    {\n        markup: [\n            {\n                tagName: 'rect',\n                selector: 'body'\n            }\n        ]\n    }\n)\n\nexport default Column","import { dia } from 'jointjs'\n\nimport TypesEnumeration from \"./ShapesTypes\"\n\nconst InputElement = dia.Element.define(\n    TypesEnumeration.INPUT_ELEMENT_TYPE,\n    {\n        attrs: {\n            body: {\n                refWidth: '100%',\n                refHeight: '100%',\n                strokeWidth: 1,\n                stroke: '#FFFFFF',\n                fill: '#e9967a'\n            },\n            name: {\n                ref: 'body'\n            }\n        }\n    },\n    {\n        markup: [\n            {\n                tagName: 'foreignObject',\n                selector: 'body',\n                children: [\n                    {\n                        tagName: 'input',\n                        namespaceURI: 'http://www.w3.org/1999/xhtml',\n                        attributes: {\n                            type: \"text\"\n                        },\n                        selector: 'name',\n                        style: {\n                            backgroundColor: '#e9967a',\n                            border: 'none',\n                            width: '100%',\n                            height: '100%',\n                            outline: 'none',\n                            fontSize: '14px',\n                            fontWeight: 'bold'\n                        }\n                    }\n                ]\n            }\n        ]\n    }\n)\n\nexport default InputElement","import { dia } from \"jointjs\"\n\nimport TypesEnumeration from \"./ShapesTypes\"\n\nconst minusHeight = '5px'\nconst minusWidth = '15px'\n\nconst RemoveColumn = dia.Element.define(\n    TypesEnumeration.REMOVE_COLUMN_TYPE,\n    {\n        attrs: {\n            body: {\n                refWidth: '100%',\n                refHeight: '100%',\n                strokeWidth: 1,\n                stroke: '#FFFFFF',\n                fill: '#ffdec2'\n            },\n            minus: {\n                ref: 'body',\n                refX: '20%',\n                refY: '40%',\n                fill: '#967559',\n                cursor: 'pointer',\n                title: \"remove column\"\n            }\n        }\n    },\n    {  \n        markup: [\n            {\n                tagName: 'rect',\n                selector: 'body',\n            },\n            {\n                tagName: 'rect',\n                selector: 'minus',\n                style: {\n                    width: minusWidth,\n                    height: minusHeight\n                }\n            }\n        ]\n    }\n)\n\nexport default RemoveColumn","import { dia } from 'jointjs'\n\nimport TypesEnumeration from \"./ShapesTypes\"\n\nconst state: number[] = [110]\n\nconst Table = dia.Element.define(\n    TypesEnumeration.TABLE_TYPE,\n    {\n        attrs: {\n            body: {\n                refWidth: '100%',\n                refHeight: '100%',\n                strokeWidth: 1,\n                stroke: '#FFFFFF',\n                fill: 'transparent'\n            }\n        },\n        widthState: state // track the table width => ability to reset\n    },\n    {\n        markup: [\n            {\n                tagName: 'rect',\n                selector: 'body'\n            }\n        ]\n    }\n)\n\nexport default Table","import { dia } from 'jointjs'\n\nimport TypesEnumeration from \"./ShapesTypes\"\n\nconst Label = dia.Element.define(\n    TypesEnumeration.LABEL_TYPE,\n    {\n        attrs: {\n            body: {\n                refWidth: '100%',\n                refHeight: '100%',\n                strokeWidth: 1,\n                stroke: '#FFFFFF',\n                fill: '#e9967a'\n            },\n            label: {\n                ref: 'body',  \n                textVerticalAnchor: 'middle',\n                textAnchor: 'middle',\n                refX: '50%',\n                refY: '50%',\n                fontSize: '14px',\n                fontWeight: 'bold',\n                fill: '#333333',\n                cursor: 'pointer'\n            }\n        }\n    },\n    {\n        markup: [\n            {\n                tagName: 'rect',\n                selector: 'body'\n            },\n            {\n                tagName: 'text',\n                selector: 'label'\n            }\n        ]\n    }\n)\n\nexport default Label","import { dia } from \"jointjs\"\n\nimport TypesEnumeration from \"./ShapesTypes\"\n\nconst Relation = dia.Link.define(\n    TypesEnumeration.RELATION_TYPE,\n    {\n        attrs: {\n            line: {\n                connection: true,\n                stroke: '#e9967a',\n                strokeWidth: 2,\n                strokeLinejoin: 'round',\n                targetMarker: {\n                    'type': 'path',\n                    'd': 'M 10 -5 0 0 10 5 z'\n                }\n            },\n            wrapper: {\n                connection: true,\n                strokeWidth: 10,\n                strokeLinejoin: 'round'\n            }\n        },\n        defaultLabel: {\n            attrs: {\n                label: {\n                    fill: '#333333',\n                    fontSize: 14,\n                    fontWeight: 'bold',\n                    textAnchor: 'middle',\n                    yAlignment: 'middle',\n                    cursor: 'pointer'\n                },\n                body: {\n                    ref: 'label',\n                    fill: 'white',\n                    stroke: '#e9967a',\n                    strokeWidth: 2,\n                    refWidth: '150%',\n                    refHeight: '150%',\n                    refX: '-25%',\n                    refY: '-25%',\n                    rx: 10,\n                    ry: 10,\n                    cursor: 'pointer'\n                },\n                remove: {\n                    ref: 'body',\n                    refX: 0,\n                    refY: 0\n                },\n                button: {},\n                icon: {}\n            },\n            position: {\n                distance: 0.5\n            },\n            markup: [\n                {\n                    tagName: 'rect',\n                    selector: 'body'\n                },\n                {\n                    tagName: 'text',\n                    selector: 'label'\n                },\n                {\n                    tagName: 'g',\n                    selector: 'remove',\n                    style: {\n                        visibility: 'hidden'\n                    },\n                    children: [\n                        {\n                            tagName: 'circle',\n                            selector: 'button',\n                            attributes: {\n                                'r': 7,\n                                'fill': '#FF1D00',\n                                'cursor': 'pointer'\n                            }\n                        },\n                        {\n                            tagName: 'path',\n                            selector: 'icon',\n                            attributes: {\n                                'd': 'M -3 -3 3 3 M -3 3 3 -3',\n                                'fill': 'none',\n                                'stroke': '#FFFFFF',\n                                'stroke-width': 2,\n                                'pointer-events': 'none'\n                            }\n                        }\n                    ]\n                }\n            ]\n        },\n        relationTypes: [\"OneToOne\", \"OneToMany\", \"ManyToMany\"]\n    }, \n    {\n        markup: [\n            {\n                tagName: 'path',\n                selector: 'wrapper',\n                attributes: {\n                    'fill': 'none',\n                    'cursor': 'pointer',\n                    'stroke': 'transparent'\n                }\n            }, \n            {\n                tagName: 'path',\n                selector: 'line',\n                attributes: {\n                    'fill': 'none',\n                    'pointer-events': 'none'\n                }\n            }\n        ]\n    }\n);\n\n\nexport default Relation","import { dia } from \"jointjs\"\n\nimport TypesEnumeration from \"./ShapesTypes\"\n\nconst fillColor = 'yellow'\nconst eyeFillColor = '#e9967a'\n\nconst PrimaryKey = dia.Element.define(\n    TypesEnumeration.PRIMARY_KEY,\n    {\n        attrs: {\n            body: {\n                refWidth: '100%',\n                refHeight: '100%',\n                strokeWidth: 1,\n                stroke: '#FFFFFF',\n                fill: '#e9967a',\n                cursor: 'pointer',\n                title: \"set as primary key\"\n            },\n            pk: {\n                ref: 'body',\n                refX: 0,\n                refY: 0\n            },\n            wheel: {\n                cursor: 'pointer'\n            },\n            eye: {\n                ref: 'wheel',\n                refX: '50%',\n                refY: '50%',\n                cursor: 'pointer'\n            },\n            verticalLine: {\n                cursor: 'pointer'\n            },\n            horizentalLine1: {\n                cursor: 'pointer'\n            },\n            horizentalLine2: {\n                cursor: 'pointer'\n            }\n        }\n    },\n    {\n        markup: [\n            {\n                tagName: 'rect',\n                selector: 'body'\n            },\n            {\n                tagName: 'g',\n                selector: 'pk',\n                style: {\n                    visibility: 'hidden'\n                },\n                children: [\n                    {\n                        tagName: 'circle',\n                        selector: 'wheel',\n                        attributes: {\n                            'cx': 12,\n                            'cy': 8,\n                            'r': 5,\n                            'fill': fillColor\n                        }\n                    },\n                    {\n                        tagName: 'circle',\n                        selector: 'eye',\n                        attributes: {\n                            'r': 3,\n                            'fill': eyeFillColor\n                        }\n                    },\n                    {\n                        tagName: 'rect',\n                        selector: 'verticalLine',\n                        attributes: {\n                            'x': 11,\n                            'y': 12,\n                            'width': 2,\n                            'height': 10,\n                            'fill': fillColor\n                        }\n                    },\n                    {\n                        tagName: 'rect',\n                        selector: 'horizentalLine1',\n                        attributes: {\n                            'x': 11,\n                            'y': 16,\n                            'width': 6,\n                            'height': 2,\n                            'fill': fillColor\n                        }\n                    },\n                    {\n                        tagName: 'rect',\n                        selector: 'horizentalLine2',\n                        attributes: {\n                            'x': 11,\n                            'y': 19,\n                            'width': 6,\n                            'height': 2,\n                            'fill': fillColor\n                        }\n                    }\n\n                ]\n            }\n        ]\n    }\n)\n\nexport default PrimaryKey","import { dia } from \"jointjs\"\n\nimport AddColumn from \"./AddColumn\"\nimport Column from \"./Column\"\nimport InputElement from \"./InputElement\"\nimport RemoveColumn from \"./RemoveColumn\"\nimport Table from \"./Table\"\nimport Label from \"./Label\"\nimport Relation from \"./Relation\"\nimport PrimaryKey from \"./PrimaryKey\"\n\n\ntype DrawerShapes = {\n    getShape: ()=>dia.Element | dia.Link\n}\n\nconst TABLE: DrawerShapes = {\n    getShape: ()=>{\n        return new Table()\n    }\n}\nconst LABEL: DrawerShapes = {\n    getShape: ()=>{\n        return new Label()\n    }\n}\n\nconst INPUT_ELEMENT: DrawerShapes = {\n    getShape: ()=>{\n        return new InputElement()\n    }\n}\nconst COLUMN: DrawerShapes = {\n    getShape: ()=>{\n        return new Column()\n    }\n}\nconst ADD_COLUMN: DrawerShapes = {\n    getShape: ()=>{\n        return new AddColumn()\n    }\n}\nconst REMOVE_COLUMN: DrawerShapes = {\n    getShape: ()=>{\n        return new RemoveColumn()\n    }\n}\nconst RELATION: DrawerShapes= {\n    getShape: ()=>{\n        let relation = new Relation()\n        relation.appendLabel({\n            attrs: {\n                label: {\n                    text: relation.get(\"relationTypes\")[0]\n                }\n            }\n        })\n        \n        return relation\n    }\n}\nconst PRIMARY_KEY: DrawerShapes = {\n    getShape: ()=>{\n        return new PrimaryKey()\n    }\n}\n\nconst DrawerShapesFactory = {\n   TABLE,\n   LABEL,\n   COLUMN,\n   ADD_COLUMN,\n   REMOVE_COLUMN,\n   INPUT_ELEMENT,\n   RELATION,\n   PRIMARY_KEY,\n} as const\n\nexport default DrawerShapesFactory\n","import { dia } from \"jointjs\";\n\nfunction resizeAddColumn(addColumn: dia.Element, width: number): void{\n    let addColumnSize = addColumn.size()\n    addColumn.resize(width, addColumnSize.height)\n}\n\nexport default resizeAddColumn","import { dia } from \"jointjs\";\nimport TypesEnumeration from \"../../view/ShapesTypes\";\n\nfunction setPrimaryKeyPosition(column: dia.Element, width: number):void {\n    let pkElement = column.getEmbeddedCells().find(\n        cell=>cell.get(\"type\") === TypesEnumeration.PRIMARY_KEY\n    )\n    width-=25 // 25 PrimaryKey width\n    let columnPosition = column.get(\"position\") as {x: number; y: number}\n    let pkElementPosition = pkElement?.get(\"position\") as {x: number; y: number}\n    pkElement?.set(\"position\", {x: columnPosition.x+width, y:pkElementPosition.y})\n}\n\nexport default setPrimaryKeyPosition","import { dia } from \"jointjs\";\nimport TypesEnumeration from \"../../view/ShapesTypes\";\nimport setPrimaryKeyPosition from \"./setPrimaryKeyPosition\";\n\nfunction resizeColumn(column: dia.Element, width: number): void {\n    let columnSize = column.size()\n    column.size(width, columnSize.height)\n    let label = column.getEmbeddedCells().find(\n        cell=>cell.get(\"type\") === TypesEnumeration.LABEL_TYPE\n    )\n    label?.set(\"size\", {\n        width: column.size().width-50, \n        height: columnSize.height\n    })\n\n    // set new position for pk\n    setPrimaryKeyPosition(column, column.size().width)\n}\n\nexport default resizeColumn","import { dia } from \"jointjs\";\n\nfunction resizeLabel(label: dia.Element, width: number): void{\n    let labelSize = label.size()\n    label.resize(width, labelSize.height)\n}\n\nexport default resizeLabel","import { dia } from \"jointjs\";\n\nimport getElementsResizeHandler from \"./ElementsResizeHandler\";\n\nfunction resizeTable(table: dia.Element, width: number): void {\n    let tableWidth = table.size().width\n    if(tableWidth < width){\n        let widthState = table.get(\"widthState\") as number[]\n        widthState.push(width)\n        \n        //resize Children according to new width\n        table.getEmbeddedCells().forEach(cell=>{\n            let handler = getElementsResizeHandler(cell.get(\"type\"))\n            handler.resizeElement(cell as dia.Element, width)\n        })\n    }\n    else {\n        //resize Children according to table width\n        table.getEmbeddedCells().forEach(cell=>{\n            let handler = getElementsResizeHandler(cell.get(\"type\"))\n            handler.resizeElement(cell as dia.Element, tableWidth)\n        })\n    }\n\n    table.fitEmbeds()\n}\n\nexport default resizeTable","import TypesEnumeration from \"../../view/ShapesTypes\"\nimport resizeAddColumn from \"./resizeAddColumn\"\nimport resizeColumn from \"./resizeColumn\"\nimport resizeLabel from \"./resizeLabel\"\nimport resizeTable from \"./resizeTable\"\nimport { ElementResizeHandler } from \"./types\"\n\nconst TableResizeHandler: ElementResizeHandler = {\n    elementType: TypesEnumeration.TABLE_TYPE,\n    resizeElement: resizeTable\n}\nconst LabelResizeHandler: ElementResizeHandler = {\n    elementType: TypesEnumeration.LABEL_TYPE,\n    resizeElement: resizeLabel\n}\nconst ColumnResizeHandler: ElementResizeHandler = {\n    elementType: TypesEnumeration.COLUMN_TYPE,\n    resizeElement: resizeColumn\n}\nconst AddColumnResizeHandler: ElementResizeHandler = {\n    elementType: TypesEnumeration.ADD_COLUMN_TYPE,\n    resizeElement: resizeAddColumn\n}\n\n\nconst ElementsResizeHandlers: readonly ElementResizeHandler[] = [\n    TableResizeHandler,\n    LabelResizeHandler,\n    ColumnResizeHandler,\n    AddColumnResizeHandler\n]\n\nfunction getElementsResizeHandler(elementType: string): ElementResizeHandler{\n    return ElementsResizeHandlers\n        .find(handler=>handler.elementType === elementType) as ElementResizeHandler\n}\n\nexport default getElementsResizeHandler","import { dia } from \"jointjs\";\nimport TypesEnumeration from \"../../view/ShapesTypes\";\nimport setPrimaryKeyPosition from \"./setPrimaryKeyPosition\";\n\nfunction resizeColumnAsParent(column: dia.Element, labelWidth: number): void {\n    if(labelWidth+50 > column.size().width){\n        setPrimaryKeyPosition(column, labelWidth+50)\n        column.fitEmbeds()\n        column.prop(\"ColumnWidth\", column.size().width)\n    }\n    else{\n        // label width == columnWidth -50\n        let columnSize = column.size()\n        let label = column.getEmbeddedCells().find(cell=>cell.get(\"type\") === TypesEnumeration.LABEL_TYPE) as dia.Element\n        label.size(columnSize.width-50, columnSize.height)\n    }\n}\n\nexport default resizeColumnAsParent","\nimport TypesEnumeration from '../../view/ShapesTypes'\nimport resizeColumnAsParent from './resizeColumnAsParent'\nimport resizeTable from './resizeTable'\nimport { LabelValueChangeHandler } from './types'\n\nconst TableHandler: LabelValueChangeHandler = {\n    parentType: TypesEnumeration.TABLE_TYPE,\n    handleEvent: resizeTable\n}\nconst ColumnHandler: LabelValueChangeHandler = {\n    parentType: TypesEnumeration.COLUMN_TYPE,\n    handleEvent: resizeColumnAsParent\n}\n\nconst handlers: readonly LabelValueChangeHandler[] = [\n    TableHandler,\n    ColumnHandler\n]\n\nfunction getLabelChangeEventHandler(parentType: string): LabelValueChangeHandler {\n    \n    return handlers.find(handler=>handler.parentType === parentType) as LabelValueChangeHandler\n}\n\nexport default getLabelChangeEventHandler","import { dia } from \"jointjs\";\nimport getElementsResizeHandler from \"./ElementsResizeHandler\";\n\nfunction resizeTableOnColumnRemoved(table: dia.Element, width: number):void{\n    table.getEmbeddedCells().forEach(cell=>{\n        let handler = getElementsResizeHandler(cell.get(\"type\"))\n        handler.resizeElement(cell as dia.Element, width)\n    })\n    table.fitEmbeds()\n}\n\nexport default resizeTableOnColumnRemoved","import { dia } from \"jointjs\"\nimport DrawerShapesFactory from \"../view/DrawerShapesFactory\"\nimport TypesEnumeration from \"../view/ShapesTypes\"\n\nimport getElementsResizeHandler from \"./strategyPattern/ElementsResizeHandler\"\nimport getLabelChangeEventHandler from \"./strategyPattern/LabelValueChangeEventHandler\"\nimport resizeTableOnColumnRemoved from \"./strategyPattern/resizeTableOnColumnRemoved\"\n\n\nfunction getTextWidth(label: dia.Element, paper: dia.Paper): number {\n    let labelView = label.findView(paper)\n    let LabelNode = labelView.findBySelector(\"label\")[0]\n    let width = LabelNode.getBoundingClientRect().width\n    return width\n}\n\nconst handleGraphEvents = (graph : dia.Graph, paper: dia.Paper): void=>{\n\n    graph.on(\"change:LabelValue\", function(inputElement: dia.Element, value: string){\n\n        let position = inputElement.get(\"position\") as {x: number; y: number}\n        let height = inputElement.size().height\n        let parent = inputElement.getParentCell() as dia.Element\n        inputElement.remove()\n        \n        let label = DrawerShapesFactory.LABEL.getShape() as dia.Element\n        label.set(\"position\", position)\n        label.attr(\"label/text\", value)\n        label.addTo(graph)\n        parent.embed(label)\n        \n        let width = getTextWidth(label, paper)\n        // +10 to center text\n        label.size(width+10, height)\n\n        let handler = getLabelChangeEventHandler(parent.get(\"type\"))\n        handler.handleEvent(parent, width)\n    })\n\n    graph.on(\"change:ColumnWidth\", function(column: dia.Element, width: number){\n        let parent = column.getParentCell() as dia.Element\n        let handler = getElementsResizeHandler(parent.get(\"type\"))\n        handler.resizeElement(parent, width)\n    })\n\n    graph.on(\"change:RemoveColumn\", function(table: dia.Element, column: dia.Element){\n        \n        let label = column.getEmbeddedCells().find(\n            cell=>cell.get(\"type\") === TypesEnumeration.LABEL_TYPE\n        ) as dia.Element\n        // +50 => remove column and pk width \n        let width = getTextWidth(label, paper) + 50 \n\n        let widthState = table.get(\"widthState\") as number[]\n        \n        if(width === widthState[widthState.length-1]){\n            widthState.pop()\n            resizeTableOnColumnRemoved(table, widthState[widthState.length-1])\n        }\n\n        column.remove()\n\n    })\n    \n}\n\nexport default handleGraphEvents","import { dia, elementTools } from \"jointjs\";\n\nimport DrawerShapesFactory from \"../view/DrawerShapesFactory\";\n\nfunction renderTableTools(tableView: dia.CellView): void {\n    \n    let removeButtonTool = new elementTools.Remove()\n    let drawRelationTool = new elementTools.Button({\n        focusOpacity: 0.5,\n        x: '100%',\n        y: '50%',\n        offset: {\n            x: 8\n        },\n        markup: [\n            {\n                tagName: 'circle',\n                selector: 'button',\n                attributes: {\n                    'r': 10,\n                    'fill': '#ffdec2',\n                    'cursor': 'pointer'   \n                }\n            },\n            {\n                tagName: 'path',\n                selector: 'icon',\n                attributes: {\n                    'd': 'M -5 0 L 0 0 M 0 0  L0 -5 L 0 5 L 5 0 L 0 -5 Z',\n                    'fill': '#967559',\n                    'stroke': '#967559',\n                    'stroke-width': 2,\n                    'pointer-events': 'none'\n                }\n            }\n        ],\n        action: function(event, elementView){\n            event.stopPropagation()\n            elementView.hideTools()\n    \n            let paper = elementView.paper as dia.Paper\n            let graph = elementView.model.graph\n            let position: {x: number; y: number} = elementView.model.get(\"position\")\n            let relation = DrawerShapesFactory.RELATION.getShape() as dia.Link\n    \n            relation.source(elementView.model)\n            relation.target({\n                x: position.x+elementView.model.size().width+10, // draw relation svgElement width=10\n                y: position.y+elementView.model.size().height/2\n            })\n    \n            relation.addTo(graph)\n    \n            let relationView = relation.findView(paper) as dia.LinkView\n            let relationRemoveButton = relationView.findLabelNode(0, \"remove\") as SVGElement\n            let relationLabel = relationView.findLabelNode(0, \"label\") as SVGElement\n    \n            // custom events for relation\n            relationRemoveButton.addEventListener(\"click\", ()=>{\n                paper.trigger(\"relation:remove\", relation)\n            })\n            relationLabel.addEventListener(\"click\", ()=>{\n                paper.trigger(\"relation:changeType\", relation)\n            })\n            \n            paper.trigger(\"relation:draw\", relation)\n    \n        }\n    })\n\n    let tableToolsView = new dia.ToolsView({\n        name: \"table-tools\",\n        tools: [\n            removeButtonTool,\n            drawRelationTool\n        ]\n    })\n    tableView.addTools(tableToolsView)\n}\n\nexport default renderTableTools","import { dia } from \"jointjs\";\n\nimport renderTableTools from './renderTableTools'\nimport DrawerShapesFactory from '../view/DrawerShapesFactory'\n\nconst table_width: number = 110\nconst children_height: number = 25\n\nconst renderTable = (paper: dia.Paper, graph: dia.Graph, position: {x: number; y: number}): void=>{\n    \n    let table = DrawerShapesFactory.TABLE.getShape() as dia.Element\n    table.position(position.x, position.y)\n    \n\n    let tableName = DrawerShapesFactory.LABEL.getShape() as dia.Element\n    tableName.resize(table_width, children_height)\n    tableName.position(position.x, position.y)\n    tableName.attr(\"label/text\", \"Table\")\n\n    let addColumn =  DrawerShapesFactory.ADD_COLUMN.getShape() as dia.Element\n    addColumn.resize(table_width, children_height)\n    addColumn.position(position.x, position.y+children_height)\n\n    graph.addCells([table, tableName, addColumn])\n    \n    table.embed(tableName)\n    table.embed(addColumn)\n    table.fitEmbeds()\n\n    //add table tools\n    let tableView = table.findView(paper)\n    renderTableTools(tableView)\n    tableView.hideTools()\n}\n\nexport default renderTable","import { dia } from \"jointjs\";\n\nimport TypesEnumeration from \"../../view/ShapesTypes\"\n\nfunction redefineEmbedsPosition(embdedCells: dia.Cell[], columnY: number): void{\n \n    /**\n     * ommit Label as it is in top\n     * ommit AddColumn => redefine its position after redefinig columns position\n     */\n    let addColumnCell = embdedCells.find(\n        cell=>cell.get(\"type\") === TypesEnumeration.ADD_COLUMN_TYPE\n    ) as dia.Element\n    \n    embdedCells = embdedCells.filter(\n        cell => cell.get(\"type\") !== TypesEnumeration.ADD_COLUMN_TYPE \n                && \n                cell.get(\"type\") !== TypesEnumeration.LABEL_TYPE\n    )\n    \n    embdedCells.forEach(columnCell=>{\n        let columnCellY = columnCell.get(\"position\").y\n        if(columnCellY > columnY){\n            columnCell.set(\"position\", {x: columnCell.get(\"position\").x, y: columnY})\n            columnCell.getEmbeddedCells().forEach(cell=>{\n                cell.set(\"position\", {x: cell.get(\"position\").x, y: columnY})\n            })\n            columnY = columnCellY\n        }\n    })\n    \n    addColumnCell.position(addColumnCell.get(\"position\").x, columnY)\n}\n\nfunction removeColumnFromTable(removeColumnCellView: dia.CellView) {\n    let removeColumnCell = removeColumnCellView.model\n    let column = removeColumnCell.getParentCell() as dia.Element\n    const columnPosition = column.get(\"position\")\n    let table = column.getParentCell() as dia.Element\n\n    redefineEmbedsPosition(table.getEmbeddedCells(), columnPosition.y)\n    table.fitEmbeds()\n\n    table.prop(\"RemoveColumn\", column)\n\n}\n\nexport default removeColumnFromTable","import { dia } from \"jointjs\"\n\nimport DrawerShapesFactory from '../../view/DrawerShapesFactory'\n\nconst removeColumnSize = {width: 25, height: 25}\n\nconst renderColumn = (addColumnCellView: dia.CellView) => {\n    let addColumnCell = addColumnCellView.model\n    let graph = addColumnCell.graph\n\n    const addColumnCellPosition: {x: number, y: number} = addColumnCell.get(\"position\")\n    const addColumnCellSize: {width: number, height: number} = addColumnCell.get(\"size\")\n\n    let column = DrawerShapesFactory.COLUMN.getShape() as dia.Element\n    column.position(addColumnCellPosition.x, addColumnCellPosition.y)\n\n    let removeColumn = DrawerShapesFactory.REMOVE_COLUMN.getShape() as dia.Element\n    removeColumn.position(addColumnCellPosition.x, addColumnCellPosition.y)\n    removeColumn.set(\"size\", removeColumnSize)\n    \n    let columnName = DrawerShapesFactory.LABEL.getShape() as dia.Element\n    columnName.position(addColumnCellPosition.x+removeColumnSize.width, addColumnCellPosition.y)\n    columnName.resize(addColumnCellSize.width-removeColumnSize.width*2, addColumnCellSize.height)\n    columnName.attr(\"label/text\", \"column\")\n    \n    let primaryKey = DrawerShapesFactory.PRIMARY_KEY.getShape() as dia.Element\n    primaryKey.set(\"size\", removeColumnSize)\n    primaryKey.position(\n        addColumnCellPosition.x+removeColumnSize.width+columnName.size().width,\n        addColumnCellPosition.y\n    )\n\n    graph.addCells([column, columnName, removeColumn, primaryKey])\n\n    column.embed(removeColumn)\n    column.embed(columnName)\n    column.embed(primaryKey)\n    column.fitEmbeds()\n    \n    addColumnCell.set(\n        \"position\", \n        {\n            x: addColumnCellPosition.x, \n            y: addColumnCellPosition.y + addColumnCellSize.height\n        }\n    )\n\n    let table = addColumnCell.getParentCell() as dia.Element\n    table.embed(column)\n    table.fitEmbeds()\n}\n\nexport default renderColumn","import { dia } from 'jointjs'\n\nimport DrawerShapesFactory from '../../view/DrawerShapesFactory'\n\nconst handleBlurEvent = (inputValue: string, inputElement: dia.Element): void=>{\n    // define custom property to inputElement (custom event)  \n    inputElement.prop(\"LabelValue\", inputValue)\n}\n\nconst renderInputElement = (labelCellView: dia.CellView): void=>{\n    let paper = labelCellView.paper as dia.Paper\n    let graph: dia.Graph = labelCellView.model.graph\n\n    const labelPosition: {x: number, y: number} = labelCellView.model.get(\"position\")\n    const labelSize: {width: number, height: number} = labelCellView.model.get('size')\n    \n    const inputElement = DrawerShapesFactory.INPUT_ELEMENT.getShape() as dia.Element\n    inputElement.position(labelPosition.x, labelPosition.y)\n    inputElement.set(\"size\", labelSize)\n    inputElement.addTo(graph)\n\n    labelCellView.model.getParentCell()?.embed(inputElement)\n    labelCellView.model.remove()\n\n    const inputElementView = inputElement.findView(paper)\n    const htmlInputElement = inputElementView.$el.find(\"input\")\n    htmlInputElement.on('mousedown click', (event)=>{\n        event.stopPropagation()\n    })\n\n    htmlInputElement.trigger('focus')\n    htmlInputElement.val(labelCellView.model.attr(\"label/text\"))\n    htmlInputElement.trigger('select')\n\n    htmlInputElement.on('blur', (event)=>{\n        handleBlurEvent(event.target.value, inputElement)\n    })\n\n    paper.on('blank:pointerclick element:pointerclick link:pointerclick cell:pointerclick', ()=>{\n        htmlInputElement.trigger('blur')\n    })\n}\n\nexport default renderInputElement","import { dia } from \"jointjs\"\n\nconst setPrimaryKey = (primaryKeyCellView: dia.CellView): void => {\n\n    let column = primaryKeyCellView.model.getParentCell() as dia.Element\n    let pk = column.get(\"primaryKey\") as boolean\n\n    let pkElement = primaryKeyCellView.findBySelector(\"pk\")[0]\n\n    if(pk){\n        pkElement.style.visibility='hidden'\n        column.set(\"primaryKey\", false)\n    }\n    else{\n        pkElement.style.visibility='visible'\n        column.set(\"primaryKey\", true)\n    }\n    \n}\n\nexport default setPrimaryKey","\nimport TypesEnumeration from \"../../view/ShapesTypes\"\nimport removeColumnFromTable from \"./removeColumnFromTable\"\nimport renderColumn from \"./renderColumn\"\nimport renderInputElement from \"./renderInputElement\"\nimport setPrimaryKey from \"./setPrimaryKey\"\n\nimport { ElementEventsHandler } from \"./types\"\n\n\nconst labelOnPointerClick: ElementEventsHandler = {\n    elementType: TypesEnumeration.LABEL_TYPE,\n    handleEvent: renderInputElement\n}\nconst addColumnOnPointerClick: ElementEventsHandler = {\n    elementType: TypesEnumeration.ADD_COLUMN_TYPE,\n    handleEvent: renderColumn\n}\nconst removeColumnOnPointerClick: ElementEventsHandler = {\n    elementType: TypesEnumeration.REMOVE_COLUMN_TYPE,\n    handleEvent: removeColumnFromTable\n}\nconst primaryKeyOnPointerClick: ElementEventsHandler = {\n    elementType: TypesEnumeration.PRIMARY_KEY,\n    handleEvent: setPrimaryKey\n}\n\nconst PointerClickEventHandlers: readonly ElementEventsHandler[] = [\n    labelOnPointerClick,\n    addColumnOnPointerClick,\n    removeColumnOnPointerClick,\n    primaryKeyOnPointerClick\n]\n\n\nfunction getPointerClickonElementHandler(elementType: string): ElementEventsHandler {\n    return PointerClickEventHandlers\n        .find(handler=>handler.elementType === elementType) as ElementEventsHandler\n}\n\nexport default getPointerClickonElementHandler\n\n","import { dia } from \"jointjs\"\n\nimport TypesEnumeration from \"../view/ShapesTypes\"\nimport renderTable from \"./renderTable\"\n\nimport getPointerClickonElementHandler from './strategyPattern/PointerClickEventHandlerStrategy'\n\nconst handlePaperEvents = (paper: dia.Paper, graph: dia.Graph): void=>{\n    paper.on(\"blank:pointerdblclick\", function(evt, x, y): void{\n        renderTable(paper, graph, {x: x, y: y})\n    })\n    paper.on(\"element:pointerclick\", function(cellView: dia.CellView, evt: dia.Event, x, y): void{\n        let pointerClickHandler =  getPointerClickonElementHandler(cellView.model.get(\"type\"))\n        try {\n            pointerClickHandler.handleEvent(cellView)   \n        } catch (error) {\n            console.log(\"Undefined Handler \", error);\n        }\n    })\n    paper.on(\"link:mouseenter\", function(relationView: dia.LinkView){\n        let relationRemoveButton = relationView.findLabelNode(0, \"remove\") as SVGElement\n        relationRemoveButton.style.visibility ='visible'\n    })\n    paper.on(\"link:mouseleave\", function(relationView: dia.LinkView){\n        let linkRemoveButton = relationView.findLabelNode(0, \"remove\") as SVGElement\n        linkRemoveButton.style.visibility ='hidden'\n    })\n    paper.on(\"element:mouseenter\", function(cellView: dia.ElementView){\n        let ancestors = cellView.model.getAncestors()\n        if(ancestors.length === 0){\n            cellView.showTools()\n        }\n        else{\n            ancestors[ancestors.length-1].findView(paper).showTools()\n        }\n    })\n    paper.on(\"element:mouseleave\", function(cellView: dia.ElementView){\n        let ancestors = cellView.model.getAncestors()\n        if(ancestors.length === 0){\n            cellView.hideTools()\n        }\n        else{\n            ancestors[ancestors.length-1].findView(paper).hideTools()\n        }\n    })\n\n    // ******** relation events *******\n    paper.on(\"relation:draw\", function(relation: dia.Link){\n        paper.$el.on({\n            \"mousemove.relation:draw\": function(event){\n                const x = event.clientX as number\n                const y = event.clientY as number\n                try {\n                    const localPoint = paper.clientToLocalPoint(x, y)\n                    relation.target(localPoint)    \n                } catch (error) {\n                    console.log(\"cann't draw relation\");\n                }\n            },\n            \"mouseup.relation:draw\": function(event){\n                paper.$el.off(\".relation:draw\")\n                const x = event.clientX as number\n                const y = event.clientY as number\n                try {\n                    const localPoint = paper.clientToLocalPoint(x, y)\n                    let tables = graph.findModelsFromPoint(localPoint)\n                            .filter(element=>element.get(\"type\") === TypesEnumeration.TABLE_TYPE);  \n                    \n                    if(tables.length === 0)\n                        relation.remove()\n                    else\n                        relation.target(tables[0])\n                    \n\n                } catch (error) {\n                    console.log(\"cann't draw relation\");\n                }\n            }\n        })\n    })\n    paper.on(\"relation:remove\", function(relation: dia.Link){\n        relation.remove()\n    })\n    paper.on(\"relation:changeType\", function(relation: dia.Link){\n        let relationTypes: string[] = relation.get(\"relationTypes\") as string[]\n\n        let currentRelationType = relationTypes[0]\n        relationTypes = relationTypes.slice(1)\n        relationTypes.push(currentRelationType)\n\n        let relationView = relation.findView(paper) as dia.LinkView\n        let relationLabel = relationView.findLabelNode(0, \"label\") as SVGElement\n\n        relationLabel.textContent = relationTypes[0]\n        relation.set(\"relationTypes\", relationTypes)\n    })\n    // ******************************************************************\n}\n\nexport default handlePaperEvents","import { dia } from 'jointjs'\n\n\nimport handleGraphEvents from './handleGraphEvents'\n\nimport TypesEnumeration from '../view/ShapesTypes'\nimport handlePaperEvents from './handlePaperEvents'\n\nconst paper_width = '100%'\nconst paper_height = '100%'\n\nfunction renderPaper(domElement: HTMLElement):dia.Paper{\n    const graph = new dia.Graph()\n    const paper = new dia.Paper(\n        {\n            el: domElement,\n            width: paper_width,\n            height: paper_height,\n            gridSize: 10,\n            drawGrid: {\n                name: 'dot',\n                args: {\n                    color: 'black',\n                    thickness: 1.5\n                }\n            },\n            model: graph,\n            interactive: (cellView)=>{\n                if (cellView.model.get(\"type\") === TypesEnumeration.TABLE_TYPE){\n                    return true\n                }\n\n                return { \n                    stopDelegation: false,\n                    labelMove: false,\n                    linkMove: false,\n                }\n            }\n        }\n    )\n\n    handleGraphEvents(graph, paper)\n    handlePaperEvents(paper, graph)\n    \n    return paper\n}\n\n\nexport default renderPaper","import { dia, util } from 'jointjs'\nimport React from 'react'\nimport { FiDownload } from 'react-icons/fi'\n\ntype ToolProps = {\n    paper: dia.Paper\n}\n\nexport default class ExportDiagramTool extends React.Component<ToolProps, {}> {\n\n    state = {\n        export: this.export.bind(this)\n    }\n\n    private export(): void {\n\t\tlet paperNode = document.getElementById(\"paper\")\n        let svgNode = paperNode?.querySelector(\"svg\") as SVGElement\n        let svgNodeClone = svgNode.cloneNode(true) as SVGElement\n        let paperArea = this.props.paper.getArea()\n        \n        svgNodeClone.setAttribute(\"width\", \"\"+paperArea.width)\n        svgNodeClone.setAttribute(\"height\", \"\"+paperArea.height)\n        \n        let svgNodeCloneString = (new XMLSerializer()).serializeToString(svgNodeClone)\n        let blob = new Blob([svgNodeCloneString], {type: \"image/svg+xml\"})\n        let url = URL.createObjectURL(blob)\n        \n        let canvas = document.createElement(\"canvas\")\n        canvas.width = paperArea.width\n        canvas.height = paperArea.height\n        let canvasContext = canvas.getContext(\"2d\")\n\n        let image = new Image()\n        image.onload = function() {\n            canvasContext?.drawImage(image, 0, 0, paperArea.width, paperArea.height)\n            util.downloadDataUri(canvas.toDataURL(), \"diagram.png\")\n            URL.revokeObjectURL(url)\n        }\n        image.src = url\n    }\n\n    render() {\n        return (\n            <div className=\"export-diagram-container\">\n                <FiDownload size={20} className=\"export-diagram\" title=\"export diagram as png\" onClick = {this.state.export} />\n            </div>\n        )\n    }\n}","import { dia } from 'jointjs'\nimport React from 'react'\nimport { FiTrash2 } from 'react-icons/fi'\n\ntype ToolProps = {\n    graph: dia.Graph\n}\n\nexport default class DeleteDiagramTool extends React.Component<ToolProps, {}> {\n\n    state = {\n        delete: this.delete.bind(this)\n    }\n\n    private delete(): void {\n        this.props.graph.clear() \n    }\n\n    render() {\n        return(\n            <div className=\"delete-diagram-container\">\n                <FiTrash2 size={20} className=\"delete-diagram\" title=\"clear paper\" onClick={this.state.delete}/>\n            </div>\n        )\n    }\n}","import React from 'react'\nimport { SiGithub } from 'react-icons/si'\n\nconst url = \"https://github.com/izemaghilas/ERdiagrams-drawer\"\n\nexport default class GitHubRepoTool extends React.Component<{}, {}> {\n    \n    state = {\n        goToGitHubRepo: this.goToGitHubRepo.bind(this)\n    }\n\n    goToGitHubRepo() {\n        window.open(url)\n    }\n\n    render() {\n        return (\n            <div className=\"github-repo-container\">\n                <SiGithub size={20} className=\"github-repo\" title=\"github repository\" onClick={this.state.goToGitHubRepo} />\n            </div>\n        )\n    }\n}","import { dia } from 'jointjs'\nimport React from 'react'\n\nimport * as tools from './tools'\n\nimport './toolsbar.css'\n\nfunction Separator() {\n    return (\n        <div className=\"tools-seperator\"></div>\n    )\n}\n\ntype ToolsBarProps={\n    paper: dia.Paper\n}\nexport default class ToolsBar extends React.Component<ToolsBarProps, {}> {\n\n    render() {\n        return(\n            <div className=\"tools-bar\">\n                <tools.DeleteDiagramTool graph={this.props.paper.model}/>\n                <Separator />\n                <tools.ExportDiagramTool paper={this.props.paper}/>\n                <Separator />\n                <tools.GitHubRepoTool />\n            </div>\n        )\n    }\n}","import React from \"react\"\nimport { ReactElement } from \"react\"\n\nimport './styles/languageComponent.css'\n\nconst LanguageComponent: React.FC<{languageName: string, setLanguage(language: string):void}> \n= ({languageName, setLanguage}): ReactElement=>{\n        \n    return(\n        <div className=\"card-usage-header-language-container\" onClick={()=>{setLanguage(languageName)}}>\n            {languageName}\n        </div>\n    )\n}\n\nexport default LanguageComponent","\ntype ActionsType = {\n    label: string,\n    instructions: string[]\n}\ntype GuideType = {\n    language: string,\n    actions: ActionsType[],\n}\n\nconst languages: {english: string, french: string} = {\n    english: \"en\",\n    french: \"fr\"\n}\n\nconst englishGuide: GuideType = {\n    language: languages.english,\n    actions: [\n        {\n            label: \"create Table\",\n            instructions: [\"Double click on canevas\"]\n        },\n        {\n            label: \"remove Table\",\n            instructions: [\n                \"Mouse on desired table to render the tools\",\n                \"Click on remove tool\"\n            ]\n        },\n        {\n            label: \"add Column\",\n            instructions: [\n                \"Mouse on desired table\",\n                \"Click on + area\"\n            ]\n        },\n        {\n            label: \"remove Column\",\n            instructions: [\n                \"Mouse on desired table\",\n                \"Click on - area\"\n            ]\n        }\n    ]\n}\nconst frenchGuide: GuideType = {\n    language: languages.french,\n    actions: [\n        {\n            label: \"créer une Table\",\n            instructions: [\"Double click sur le canevas\"]\n        },\n        {\n            label: \"supprimer une Table\",\n            instructions: [\n                \"Déplacez la souris sur la table souhaitée pour afficher les outils\",\n                \"Cliquez sur l'outil de suppression\"\n            ]\n        },\n        {\n            label: \"ajouter une Colonne\",\n            instructions: [\n                \"Déplacez la souris sur la table souhaitée\",\n                \"Cliquez sur la zone +\"\n            ]\n        },\n        {\n            label: \"supprimer une Colonne\",\n            instructions: [\n                \"Déplacez la souris sur la table souhaitée\",\n                \"Cliquez sur la zone -\"\n            ]\n        }\n    ]\n}\n\nexport { languages, englishGuide, frenchGuide }\nexport type { GuideType }","import React, { ReactElement } from 'react'\nimport { FiXCircle } from 'react-icons/fi'\n\nimport LanguageComponent from './LanguageComponent'\n\nimport './styles/usageCardHeader.css'\n\nimport { languages } from './guides' \n\nconst UsageCardHeader: React.FC<{closeUsageCard(): void, setUserGuideLanguage(language: string): void}> \n= ({closeUsageCard, setUserGuideLanguage}): ReactElement => {\n    \n    return(\n        <div className=\"usage-card-header-container\">\n            <div className=\"usage-card-header-languages-container\">\n                <LanguageComponent \n                    languageName={languages.english}\n                    setLanguage={setUserGuideLanguage}\n                />\n                <LanguageComponent \n                    languageName={languages.french}\n                    setLanguage={setUserGuideLanguage}\n                />\n            </div>\n            <FiXCircle \n                className=\"usage-card-header-close-icon\" \n                size={30} \n                color=\"#967559\"\n                onClick={closeUsageCard}\n            />\n        </div>\n    )\n}\n\nexport default UsageCardHeader","import React, { ReactElement, useState } from \"react\"\nimport { GuideType } from \"./guides\"\n\nimport './styles/usageCardBody.css'\n\n\nconst ActionLabel: React.FC<{\n    label: string, \n    instructions: string[], \n    setInstructions(instructions: string[]): void,\n    setEmptyInstructions(value: boolean): void\n}> \n= ({label, instructions, setInstructions, setEmptyInstructions}): ReactElement=>{\n    return (\n        <div \n            className=\"usage-card-body-action-label-container\"\n            onClick={()=>{\n                setInstructions(instructions)\n                setEmptyInstructions(false)\n            }}\n        >\n            {label}\n        </div>\n    )\n}\n\nconst ActionInstruction: React.FC<{instruction: string}> = ({instruction}): ReactElement=>{\n    return (\n        <li className=\"usage-card-body-action-instruction-container\">{instruction}</li>\n    )\n}\n\nconst UsageCardBody: React.FC<{\n    userGuide: GuideType, \n    emptyInstructions: boolean, \n    setEmptyInstructions(value: boolean):void,\n}> \n= ({userGuide, emptyInstructions, setEmptyInstructions}): ReactElement=>{\n    const [instructions, setInstructions] = useState<string[]>([])\n    \n    function showInstructions(instructions: string[]){\n        setInstructions(instructions)\n    }\n\n    return (\n        <div className=\"usage-card-body\">\n            <div className=\"usage-card-body-action-labels-container\">\n                {\n                    userGuide.actions.map(action=>(\n                        <ActionLabel \n                            label={action.label} \n                            instructions={action.instructions}\n                            setInstructions={showInstructions}\n                            setEmptyInstructions={setEmptyInstructions}\n                            key={action.label}\n                        />\n                    ))\n                }\n            </div>\n            <div className=\"usage-card-body-action-instructions-container\">\n                {\n                    !emptyInstructions && instructions.map(instruction=>(<ActionInstruction instruction={instruction} key={instruction} />))\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default UsageCardBody","/**\n * React component for usage card\n * help users understand how to use the app\n */\n\nimport React from 'react'\n\nimport UsageCardHeader from './UsageCardHeader'\nimport UsageCardBody from './UsageCardBody'\n\nimport './styles/usageCard.css'\nimport { englishGuide, frenchGuide, GuideType, languages } from './guides'\n\nexport default class UsageCard extends React.Component<{closeUserGuide():void},{userGuide: GuideType, emptyInstructions: boolean}> {\n\n    state = {\n        userGuide: englishGuide,\n        emptyInstructions: false // used to remove current instructions on switching language\n    }\n\n    setEmptyInstructions(value: boolean){\n        this.setState({emptyInstructions: value})\n    }\n\n    setUserGuideLanguage(language: string){\n        this.state.userGuide.language !== language? this.setState({emptyInstructions: true}) : this.setState({emptyInstructions: false})\n        \n        if(language === languages.french){\n            this.setState({userGuide: frenchGuide})\n        }\n        else{\n            this.setState({userGuide: englishGuide})\n        }\n    }\n\n    render(){\n        return(\n            <div className=\"usage-card-container\">\n                <UsageCardHeader \n                    closeUsageCard={this.props.closeUserGuide} \n                    setUserGuideLanguage={this.setUserGuideLanguage.bind(this)}\n                />\n                <UsageCardBody \n                    userGuide={this.state.userGuide} \n                    emptyInstructions={this.state.emptyInstructions}\n                    setEmptyInstructions={this.setEmptyInstructions.bind(this)}\n                />\n            </div>\n        )\n    }\n}","export default __webpack_public_path__ + \"static/media/logoER.61383bf8.png\";","import Drawer from './components/Drawer'\n\nexport default Drawer","/***\n * react component for drawer \n */\n\nimport React from 'react'\nimport { FcAssistant } from 'react-icons/fc'\nimport { dia } from 'jointjs'\n\nimport renderPaper from '../controller/renderPaper'\n\nimport ToolsBar from './ToolsBar'\nimport UsageCard from './userGuide/UsageCard'\n\nimport './drawer.css'\nimport logo from './images/logoER.png'\n\n\nexport default class Drawer extends React.Component<{}, {paper: dia.Paper, showAssistantIcon: boolean, showUserGuide: boolean}> {\n\n    constructor(props: {} | Readonly<{}>) {\n        super(props)\n        this.state = {\n            paper: new dia.Paper({}),\n            showAssistantIcon: false,\n            showUserGuide: true\n        }\n    }\n    componentDidMount() {\n        let rendredPaper = renderPaper(document.getElementById(\"paper\") as HTMLElement)\n        this.setState({paper: rendredPaper})\n    }\n    closeUserGuide(){\n        this.setState({showAssistantIcon: true, showUserGuide: false})\n    }\n    openUserGuide(){\n        this.setState({showAssistantIcon: false, showUserGuide: true})\n    }\n\n    render() {\n        return (\n            <div className=\"drawer\">\n                <div className=\"drawer-header\">\n                    <div>\n                        <img src={logo} alt=\"logo\"/>\n                        <h4>Entity Relationship Diagram</h4>\n                    </div>\n                    {this.state.showAssistantIcon?\n                        <FcAssistant  \n                            className=\"drawer-header-assistant-icon\" \n                            title=\"assistant\"\n                            size={60}\n                            onClick={this.openUserGuide.bind(this)}\n                        />\n                        : \n                        null\n                    }\n                    {this.state.showUserGuide?\n                        <UsageCard closeUserGuide={this.closeUserGuide.bind(this)}/>\n                        :\n                        null\n                    }\n                </div>\n                <ToolsBar paper={this.state.paper}/>\n                <main>\n                    <div className=\"paper-container\">\n                        <div id=\"paper\"></div>\n                    </div> \n                </main>\n            </div>\n        )\n    }\n}","import 'jointjs/dist/joint.css'\n\nimport Drawer from './drawer'\n\nfunction App() {\n  return (\n    <Drawer/>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}